
UART_TRANSCEIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000490  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000176  00000000  00000000  00010834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000109b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00010a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e81  00000000  00000000  00010a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007a3  00000000  00000000  000118f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052d8f  00000000  00000000  0001209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00064e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  00064e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000354 	.word	0x08000354

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000354 	.word	0x08000354

080001d4 <USART2_Init>:
#define PS			(1U<<9)
#define TE			(1U<<3)
#define RE			(1U<<2)

void USART2_Init()
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	///////////////// Enable the Clocks ////////////////
	RCC -> APB1ENR |= USART2EN;
 80001d8:	4b14      	ldr	r3, [pc, #80]	; (800022c <USART2_Init+0x58>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <USART2_Init+0x58>)
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40
	///////////////// SETUP THE GPIOs //////////////////
	GPIOA -> MODER |= (1<<7)|(1<<5); // PA3 and PA2 are Set to Alternate Functionality Mode
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <USART2_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <USART2_Init+0x5c>)
 80001ea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA -> AFR[0] |= (1<<8)|(1<<9)|(1<<10)|(1<<12)|(1<<13)|(1<<14);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <USART2_Init+0x5c>)
 80001f2:	6a1b      	ldr	r3, [r3, #32]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <USART2_Init+0x5c>)
 80001f6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80001fa:	6213      	str	r3, [r2, #32]
	// Set the AF mode to 7
	///////////////// Setup the USART Configurations ////////////
	USART2 -> CR1 |= TE|RE;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <USART2_Init+0x60>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <USART2_Init+0x60>)
 8000202:	f043 030c 	orr.w	r3, r3, #12
 8000206:	60d3      	str	r3, [r2, #12]
	//1. Setup the Control Register
	USART2 -> BRR = ((F_CPU + (BaudRate/2U))/BaudRate);
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <USART2_Init+0x60>)
 800020a:	228b      	movs	r2, #139	; 0x8b
 800020c:	609a      	str	r2, [r3, #8]
	//2. COnfigure the Baud rate
	USART2 -> CR1 |= UE;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <USART2_Init+0x60>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <USART2_Init+0x60>)
 8000214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000218:	60d3      	str	r3, [r2, #12]
	//3. Enable the UART Protocol
	USART2 -> DR = 0;
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <USART2_Init+0x60>)
 800021c:	2200      	movs	r2, #0
 800021e:	605a      	str	r2, [r3, #4]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000
 8000234:	40004400 	.word	0x40004400

08000238 <USART2_Transmit>:

void USART2_Transmit(char data)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	while (((USART2 -> SR) & TXE)==0);
 8000242:	bf00      	nop
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <USART2_Transmit+0x2c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f9      	beq.n	8000244 <USART2_Transmit+0xc>
	//5. Now wait for the Transmit Flag to be set
	USART2 -> DR = data;
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <USART2_Transmit+0x2c>)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	6053      	str	r3, [r2, #4]
	//3. Load the Data
	//_delay_ms(100);
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40004400 	.word	0x40004400

08000268 <USART2_Receive>:

char USART2_Receive()
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	while (((USART2 -> SR) & RXNE)==0);
 800026c:	bf00      	nop
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <USART2_Receive+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0320 	and.w	r3, r3, #32
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <USART2_Receive+0x6>
	//5. Now wait for the Receive Flag to be set
	return USART2 -> DR;
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <USART2_Receive+0x24>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	b2db      	uxtb	r3, r3
}
 8000280:	4618      	mov	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40004400 	.word	0x40004400

08000290 <main>:
	USART2_Transmit(ch);
	return ch;
}

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	///////////////// Enable the Clocks ////////////////
	RCC -> AHB1ENR |= GPIOAEN;
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <main+0x24>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <main+0x24>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
	USART2_Init();
 80002a0:	f7ff ff98 	bl	80001d4 <USART2_Init>
	while(1)
	{
		USART2_Transmit(USART2_Receive());
 80002a4:	f7ff ffe0 	bl	8000268 <USART2_Receive>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffc4 	bl	8000238 <USART2_Transmit>
 80002b0:	e7f8      	b.n	80002a4 <main+0x14>
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ffd1 	bl	8000290 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
