
UART_Interrupt_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000414  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000414  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d8  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000328  00000000  00000000  00010e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  000111e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000238  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ab0  00000000  00000000  00011498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f1dd  00000000  00000000  00011f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00061125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  00061178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f4 	.word	0x080003f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003f4 	.word	0x080003f4

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <USART2_Init_Intp>:
	//3. Enable the UART Protocol
	USART2 -> DR = 0;
}

void USART2_Init_Intp()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	///////////////// Enable the Clocks ////////////////
	RCC -> AHB1ENR |= GPIOAEN;
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <USART2_Init_Intp+0x70>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <USART2_Init_Intp+0x70>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> APB1ENR |= USART2EN;
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <USART2_Init_Intp+0x70>)
 8000222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000224:	4a16      	ldr	r2, [pc, #88]	; (8000280 <USART2_Init_Intp+0x70>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800022a:	6413      	str	r3, [r2, #64]	; 0x40
	///////////////// SETUP THE GPIOs //////////////////
	GPIOA -> MODER |= (1<<7)|(1<<5); // PA3 and PA2 are Set to Alternate Functionality Mode
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <USART2_Init_Intp+0x74>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <USART2_Init_Intp+0x74>)
 8000232:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA -> AFR[0] |= (1<<8)|(1<<9)|(1<<10)|(1<<12)|(1<<13)|(1<<14);
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <USART2_Init_Intp+0x74>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <USART2_Init_Intp+0x74>)
 800023e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000242:	6213      	str	r3, [r2, #32]
	// Set the AF mode to 7
	///////////////// Setup the USART Configurations ////////////
	USART2 -> CR1 |= TE|RE;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <USART2_Init_Intp+0x78>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <USART2_Init_Intp+0x78>)
 800024a:	f043 030c 	orr.w	r3, r3, #12
 800024e:	60d3      	str	r3, [r2, #12]
	//1. Setup the Control Register
	USART2 -> CR1 |= RXNEIE;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <USART2_Init_Intp+0x78>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <USART2_Init_Intp+0x78>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	60d3      	str	r3, [r2, #12]
	//2. Set the Interrupt Bits
	USART2 -> BRR = ((F_CPU + (BaudRate/2U))/BaudRate);
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <USART2_Init_Intp+0x78>)
 800025e:	228b      	movs	r2, #139	; 0x8b
 8000260:	609a      	str	r2, [r3, #8]
	//3. COnfigure the Baud rate
	NVIC_EnableIRQ(USART2_IRQn);// sei();
 8000262:	2026      	movs	r0, #38	; 0x26
 8000264:	f7ff ffb6 	bl	80001d4 <__NVIC_EnableIRQ>
	//4. Initialize the NVIC
	USART2 -> CR1 |= UE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <USART2_Init_Intp+0x78>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <USART2_Init_Intp+0x78>)
 800026e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000272:	60d3      	str	r3, [r2, #12]
	//3. Enable the UART Protocol
	USART2 -> DR = 0;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <USART2_Init_Intp+0x78>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	40004400 	.word	0x40004400

0800028c <USART2_Transmit>:

void USART2_Transmit(char data)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	while (((USART2 -> SR) & TXE)==0);
 8000296:	bf00      	nop
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <USART2_Transmit+0x2c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <USART2_Transmit+0xc>
	//5. Now wait for the Transmit Flag to be set
	USART2 -> DR = data;
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <USART2_Transmit+0x2c>)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	6053      	str	r3, [r2, #4]
	//3. Load the Data
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40004400 	.word	0x40004400

080002bc <USART2_Receive>:

char USART2_Receive()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	while (((USART2 -> SR) & RXNE)==0);
 80002c0:	bf00      	nop
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <USART2_Receive+0x24>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0320 	and.w	r3, r3, #32
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <USART2_Receive+0x6>
	//5. Now wait for the Receive Flag to be set
	return USART2 -> DR;
 80002ce:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <USART2_Receive+0x24>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	b2db      	uxtb	r3, r3
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40004400 	.word	0x40004400

080002e4 <main>:
#include <stm32f401xe.h>
#include "delay.h"
#include "USART2.h"

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	USART2_Init_Intp();
 80002e8:	f7ff ff92 	bl	8000210 <USART2_Init_Intp>
	//USART2_Init();
	GPIOA -> MODER |= (1U<<2);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <main+0x24>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <main+0x24>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6013      	str	r3, [r2, #0]
	while(1)
	{
		USART2_Transmit(USART2_Receive());
 80002f8:	f7ff ffe0 	bl	80002bc <USART2_Receive>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffc4 	bl	800028c <USART2_Transmit>
 8000304:	e7f8      	b.n	80002f8 <main+0x14>
 8000306:	bf00      	nop
 8000308:	40020000 	.word	0x40020000

0800030c <USART2_IRQHandler>:
	}
}

void USART2_IRQHandler()	// ISR()
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
	if (USART2 -> SR & RXNE)
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <USART2_IRQHandler+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0320 	and.w	r3, r3, #32
 800031a:	2b00      	cmp	r3, #0
 800031c:	d00f      	beq.n	800033e <USART2_IRQHandler+0x32>
	{
		GPIOA -> ODR ^= (1U<<1);
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <USART2_IRQHandler+0x44>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <USART2_IRQHandler+0x44>)
 8000324:	f083 0302 	eor.w	r3, r3, #2
 8000328:	6153      	str	r3, [r2, #20]
		for(long i = 0; i < 100000; i = i+1);
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e002      	b.n	8000336 <USART2_IRQHandler+0x2a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a06      	ldr	r2, [pc, #24]	; (8000354 <USART2_IRQHandler+0x48>)
 800033a:	4293      	cmp	r3, r2
 800033c:	ddf8      	ble.n	8000330 <USART2_IRQHandler+0x24>
	}
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400
 8000350:	40020000 	.word	0x40020000
 8000354:	0001869f 	.word	0x0001869f

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffab 	bl	80002e4 <main>

0800038e <LoopForever>:

LoopForever:
    b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	; (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	; (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
