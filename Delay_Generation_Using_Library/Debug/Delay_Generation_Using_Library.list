
Delay_Generation_Using_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000384  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000384  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004d1  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ca  00000000  00000000  00010885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db84  00000000  00000000  00010b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a15  00000000  00000000  0001e68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ed6c  00000000  00000000  0001f0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006de0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  0006de60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000364 	.word	0x08000364

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000364 	.word	0x08000364

080001d4 <_delay_ms>:
#define ONE_MS_COUNT	F_CPU / 1000UL
#define ONE_S_COUNT		F_CPU


void _delay_ms(int delay)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < delay; i = i+1)
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e022      	b.n	8000228 <_delay_ms+0x54>
		/*
		 * CTRL == CSR
		 * LOAD == RVR
		 * VAL  == CVR
		 * */
		SysTick -> LOAD = ONE_MS_COUNT;
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <_delay_ms+0x6c>)
 80001e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80001e8:	605a      	str	r2, [r3, #4]
		// we reduce one value as the counter travels from reload value to zero
		/* Clear the current Value register */
		SysTick -> VAL = 0;
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <_delay_ms+0x6c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	609a      	str	r2, [r3, #8]
		/* Select the Clock Source */
		SysTick -> CTRL |= CLKSOURCE;
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <_delay_ms+0x6c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a12      	ldr	r2, [pc, #72]	; (8000240 <_delay_ms+0x6c>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]
		//SysTick -> CTRL |= (1<<2);
		//SysTick -> CTRL &= ~(1<<2);
		// if external clock is used, use 0 in CLK SOURCE
		// if internal clock is used, use 1 in CLK SOURCE
		/* Enable the system Tick  */
		SysTick -> CTRL |= ENABLE;
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <_delay_ms+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <_delay_ms+0x6c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]
		/* NOw we will wait for count flag to turn on */
		while ((SysTick -> CTRL & COUNTFLAG) == 0)
 8000208:	bf00      	nop
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <_delay_ms+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <_delay_ms+0x36>
		{
			// wait here
		}

		// once count flag is generated, we stop the counter
		SysTick -> CTRL &= ~ENABLE;
 8000216:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <_delay_ms+0x6c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <_delay_ms+0x6c>)
 800021c:	f023 0301 	bic.w	r3, r3, #1
 8000220:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < delay; i = i+1)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	dbd8      	blt.n	80001e2 <_delay_ms+0xe>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e010 	.word	0xe000e010

08000244 <main>:
#include <stm32f401xe.h>
#include "delay.h"


int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1<<0);
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <main+0x78>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <main+0x78>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> AHB1ENR |= (1<<1);// AHB1-> GPIOB
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x78>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <main+0x78>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA -> MODER |= (1<<0);
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0x7c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <main+0x7c>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (1<<0);
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <main+0x80>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <main+0x80>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	while(1)
	{
		// GPIOA -> ODR ^= (1<<0)

		GPIOA -> ODR |= (1<<0);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <main+0x7c>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <main+0x7c>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6153      	str	r3, [r2, #20]
		GPIOB -> ODR &= ~(1<<0);
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <main+0x80>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <main+0x80>)
 800028a:	f023 0301 	bic.w	r3, r3, #1
 800028e:	6153      	str	r3, [r2, #20]
		// Inbuilt Delay To Be USed Here
		_delay_ms(500);
 8000290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000294:	f7ff ff9e 	bl	80001d4 <_delay_ms>
		GPIOB -> ODR |= (1<<0);
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <main+0x80>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a09      	ldr	r2, [pc, #36]	; (80002c4 <main+0x80>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6153      	str	r3, [r2, #20]
		GPIOA -> ODR &= ~(1<<0);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <main+0x7c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <main+0x7c>)
 80002aa:	f023 0301 	bic.w	r3, r3, #1
 80002ae:	6153      	str	r3, [r2, #20]
		// Inbuilt Delay To Be USed Here
		_delay_ms(500);
 80002b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b4:	f7ff ff8e 	bl	80001d4 <_delay_ms>
		GPIOA -> ODR |= (1<<0);
 80002b8:	e7de      	b.n	8000278 <main+0x34>
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40020400 	.word	0x40020400

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffa3 	bl	8000244 <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
