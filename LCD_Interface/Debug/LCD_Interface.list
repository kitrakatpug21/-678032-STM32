
LCD_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  0800052c  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800052c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800052c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000575  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000232  00000000  00000000  00010ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00010d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dbc6  00000000  00000000  00010e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af4  00000000  00000000  0001e9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ee16  00000000  00000000  0001f4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e2d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000140  00000000  00000000  0006e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004e0 	.word	0x080004e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004e0 	.word	0x080004e0

080001d4 <_delay_ms>:
#define ONE_MS_COUNT	F_CPU / 1000UL
#define ONE_S_COUNT		F_CPU


void _delay_ms(int delay)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < delay; i = i+1)
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e022      	b.n	8000228 <_delay_ms+0x54>
		/*
		 * CTRL == CSR
		 * LOAD == RVR
		 * VAL  == CVR
		 * */
		SysTick -> LOAD = ONE_MS_COUNT;
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <_delay_ms+0x6c>)
 80001e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80001e8:	605a      	str	r2, [r3, #4]
		// we reduce one value as the counter travels from reload value to zero
		/* Clear the current Value register */
		SysTick -> VAL = 0;
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <_delay_ms+0x6c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	609a      	str	r2, [r3, #8]
		/* Select the Clock Source */
		SysTick -> CTRL |= CLKSOURCE;
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <_delay_ms+0x6c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a12      	ldr	r2, [pc, #72]	; (8000240 <_delay_ms+0x6c>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]
		//SysTick -> CTRL |= (1<<2);
		//SysTick -> CTRL &= ~(1<<2);
		// if external clock is used, use 0 in CLK SOURCE
		// if internal clock is used, use 1 in CLK SOURCE
		/* Enable the system Tick  */
		SysTick -> CTRL |= ENABLE;
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <_delay_ms+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <_delay_ms+0x6c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]
		/* NOw we will wait for count flag to turn on */
		while ((SysTick -> CTRL & COUNTFLAG) == 0)
 8000208:	bf00      	nop
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <_delay_ms+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <_delay_ms+0x36>
		{
			// wait here
		}

		// once count flag is generated, we stop the counter
		SysTick -> CTRL &= ~ENABLE;
 8000216:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <_delay_ms+0x6c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <_delay_ms+0x6c>)
 800021c:	f023 0301 	bic.w	r3, r3, #1
 8000220:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < delay; i = i+1)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	dbd8      	blt.n	80001e2 <_delay_ms+0xe>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e010 	.word	0xe000e010

08000244 <LCD_Command>:
//void Load_Data


// 8 bit LCD Mode
void LCD_Command(uint8_t cmd)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	GPIOA -> ODR = 0;// to clear any previous value on ODR register
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <LCD_Command+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR &= ~(RS);
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <LCD_Command+0x64>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <LCD_Command+0x64>)
 800025a:	f023 0301 	bic.w	r3, r3, #1
 800025e:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR &= ~(EN);
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <LCD_Command+0x64>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <LCD_Command+0x64>)
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (cmd << 2); // load DATA
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <LCD_Command+0x64>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	0092      	lsls	r2, r2, #2
 8000274:	4611      	mov	r1, r2
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <LCD_Command+0x64>)
 8000278:	430b      	orrs	r3, r1
 800027a:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (EN);
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <LCD_Command+0x64>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <LCD_Command+0x64>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 8000288:	200a      	movs	r0, #10
 800028a:	f7ff ffa3 	bl	80001d4 <_delay_ms>
	GPIOA -> ODR &= ~(EN);
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <LCD_Command+0x64>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <LCD_Command+0x64>)
 8000294:	f023 0302 	bic.w	r3, r3, #2
 8000298:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 800029a:	200a      	movs	r0, #10
 800029c:	f7ff ff9a 	bl	80001d4 <_delay_ms>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40020000 	.word	0x40020000

080002ac <LCD_Character>:

void LCD_Character(char ch)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
	GPIOA -> ODR = 0;// to clear any previous value on ODR register
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <LCD_Character+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (RS);
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <LCD_Character+0x64>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a13      	ldr	r2, [pc, #76]	; (8000310 <LCD_Character+0x64>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR &= ~(EN);
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <LCD_Character+0x64>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <LCD_Character+0x64>)
 80002ce:	f023 0302 	bic.w	r3, r3, #2
 80002d2:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (ch << 2); // load DATA
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <LCD_Character+0x64>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <LCD_Character+0x64>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (EN);
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <LCD_Character+0x64>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <LCD_Character+0x64>)
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 80002f0:	200a      	movs	r0, #10
 80002f2:	f7ff ff6f 	bl	80001d4 <_delay_ms>
	GPIOA -> ODR &= ~(EN);
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <LCD_Character+0x64>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <LCD_Character+0x64>)
 80002fc:	f023 0302 	bic.w	r3, r3, #2
 8000300:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 8000302:	200a      	movs	r0, #10
 8000304:	f7ff ff66 	bl	80001d4 <_delay_ms>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40020000 	.word	0x40020000

08000314 <LCD_Initialize>:

void LCD_Initialize()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	_delay_ms(300);
 8000318:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800031c:	f7ff ff5a 	bl	80001d4 <_delay_ms>
	LCD_Command(0x38);// LCD 8 bit 2 row 16 character mode
 8000320:	2038      	movs	r0, #56	; 0x38
 8000322:	f7ff ff8f 	bl	8000244 <LCD_Command>
	//
	LCD_Command(0x0E);// Cursor
 8000326:	200e      	movs	r0, #14
 8000328:	f7ff ff8c 	bl	8000244 <LCD_Command>
	LCD_Command(0x01);// CLEAR
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff89 	bl	8000244 <LCD_Command>
	_delay_ms(10);
 8000332:	200a      	movs	r0, #10
 8000334:	f7ff ff4e 	bl	80001d4 <_delay_ms>
	LCD_Command(0x06); // Left to RIGHT
 8000338:	2006      	movs	r0, #6
 800033a:	f7ff ff83 	bl	8000244 <LCD_Command>
	LCD_Command(0x80); // ROW-0 COL-0 Position
 800033e:	2080      	movs	r0, #128	; 0x80
 8000340:	f7ff ff80 	bl	8000244 <LCD_Command>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}

08000348 <LCD_Print>:

void LCD_Print(char *str)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000350:	e007      	b.n	8000362 <LCD_Print+0x1a>
	{
		LCD_Character(*str);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffa8 	bl	80002ac <LCD_Character>
		str++;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f3      	bne.n	8000352 <LCD_Print+0xa>
	}
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <main>:

int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= GPIOAEN;
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <main+0xac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a28      	ldr	r2, [pc, #160]	; (8000420 <main+0xac>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6313      	str	r3, [r2, #48]	; 0x30

	// SETUP PA0 to PA9 as OUTPUT
	GPIOA -> MODER |= (1U<<0)|(1U<<2)|(1U<<4)|(1U<<6)|(1U<<8)|(1U<<10)|(1U<<12)|(1U<<14)|(1U<<16)|(1U<<18);
 8000384:	4b27      	ldr	r3, [pc, #156]	; (8000424 <main+0xb0>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4926      	ldr	r1, [pc, #152]	; (8000424 <main+0xb0>)
 800038a:	4b27      	ldr	r3, [pc, #156]	; (8000428 <main+0xb4>)
 800038c:	4313      	orrs	r3, r2
 800038e:	600b      	str	r3, [r1, #0]
	GPIOA -> MODER &= ~((1U<<1)|(1U<<3)|(1U<<5)|(1U<<7)|(1U<<9)|(1U<<11)|(1U<<13)|(1U<<15)|(1U<<17)|(1U<<19));
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <main+0xb0>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4923      	ldr	r1, [pc, #140]	; (8000424 <main+0xb0>)
 8000396:	4b25      	ldr	r3, [pc, #148]	; (800042c <main+0xb8>)
 8000398:	4013      	ands	r3, r2
 800039a:	600b      	str	r3, [r1, #0]

	LCD_Initialize();
 800039c:	f7ff ffba 	bl	8000314 <LCD_Initialize>
	while(1)
	{
		LCD_Command(0x80);
 80003a0:	2080      	movs	r0, #128	; 0x80
 80003a2:	f7ff ff4f 	bl	8000244 <LCD_Command>
		LCD_Print("Shakuntla");
 80003a6:	4822      	ldr	r0, [pc, #136]	; (8000430 <main+0xbc>)
 80003a8:	f7ff ffce 	bl	8000348 <LCD_Print>
		_delay_ms(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f7ff ff10 	bl	80001d4 <_delay_ms>
		LCD_Command(0xC0);
 80003b4:	20c0      	movs	r0, #192	; 0xc0
 80003b6:	f7ff ff45 	bl	8000244 <LCD_Command>
		LCD_Print("Jaiswal");
 80003ba:	481e      	ldr	r0, [pc, #120]	; (8000434 <main+0xc0>)
 80003bc:	f7ff ffc4 	bl	8000348 <LCD_Print>
		_delay_ms(1000);
 80003c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c4:	f7ff ff06 	bl	80001d4 <_delay_ms>
		LCD_Command(0x01);_delay_ms(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff ff3b 	bl	8000244 <LCD_Command>
 80003ce:	2001      	movs	r0, #1
 80003d0:	f7ff ff00 	bl	80001d4 <_delay_ms>
		LCD_Command(0x80);
 80003d4:	2080      	movs	r0, #128	; 0x80
 80003d6:	f7ff ff35 	bl	8000244 <LCD_Command>
		LCD_Print("Arjun");
 80003da:	4817      	ldr	r0, [pc, #92]	; (8000438 <main+0xc4>)
 80003dc:	f7ff ffb4 	bl	8000348 <LCD_Print>
		_delay_ms(1000);
 80003e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e4:	f7ff fef6 	bl	80001d4 <_delay_ms>
		LCD_Command(0xC0);
 80003e8:	20c0      	movs	r0, #192	; 0xc0
 80003ea:	f7ff ff2b 	bl	8000244 <LCD_Command>
		LCD_Print("Singh");
 80003ee:	4813      	ldr	r0, [pc, #76]	; (800043c <main+0xc8>)
 80003f0:	f7ff ffaa 	bl	8000348 <LCD_Print>
		_delay_ms(1000);
 80003f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f8:	f7ff feec 	bl	80001d4 <_delay_ms>
		LCD_Command(0x90);
 80003fc:	2090      	movs	r0, #144	; 0x90
 80003fe:	f7ff ff21 	bl	8000244 <LCD_Command>
		LCD_Print("Rajput");
 8000402:	480f      	ldr	r0, [pc, #60]	; (8000440 <main+0xcc>)
 8000404:	f7ff ffa0 	bl	8000348 <LCD_Print>
		_delay_ms(1000);
 8000408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040c:	f7ff fee2 	bl	80001d4 <_delay_ms>
		LCD_Command(0x01);_delay_ms(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f7ff ff17 	bl	8000244 <LCD_Command>
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff fedc 	bl	80001d4 <_delay_ms>
		LCD_Command(0x80);
 800041c:	e7c0      	b.n	80003a0 <main+0x2c>
 800041e:	bf00      	nop
 8000420:	40023800 	.word	0x40023800
 8000424:	40020000 	.word	0x40020000
 8000428:	00055555 	.word	0x00055555
 800042c:	fff55555 	.word	0xfff55555
 8000430:	080004f8 	.word	0x080004f8
 8000434:	08000504 	.word	0x08000504
 8000438:	0800050c 	.word	0x0800050c
 800043c:	08000514 	.word	0x08000514
 8000440:	0800051c 	.word	0x0800051c

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff ff7d 	bl	8000374 <main>

0800047a <LoopForever>:

LoopForever:
    b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	2000001c 	.word	0x2000001c

08000494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	08000524 	.word	0x08000524
 80004d4:	08000524 	.word	0x08000524
 80004d8:	08000524 	.word	0x08000524
 80004dc:	08000528 	.word	0x08000528

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
