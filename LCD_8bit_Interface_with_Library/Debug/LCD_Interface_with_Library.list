
LCD_Interface_with_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  4 .ARM          00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000534  0800053c  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800053c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800053c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000736  00000000  00000000  0001056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000304  00000000  00000000  00010ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00010fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00011058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc85  00000000  00000000  000110d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f8e  00000000  00000000  0001ed55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004edf4  00000000  00000000  0001fce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006ead7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000016c  00000000  00000000  0006eb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004f0 	.word	0x080004f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004f0 	.word	0x080004f0

080001d4 <LCD_Command>:
 */

#include "LCD_8BIT.h"

void LCD_Command(uint8_t cmd)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	GPIOA -> ODR = 0;// to clear any previous value on ODR register
 80001de:	4b16      	ldr	r3, [pc, #88]	; (8000238 <LCD_Command+0x64>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR &= ~(RS);
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <LCD_Command+0x64>)
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	4a13      	ldr	r2, [pc, #76]	; (8000238 <LCD_Command+0x64>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR &= ~(EN);
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <LCD_Command+0x64>)
 80001f2:	695b      	ldr	r3, [r3, #20]
 80001f4:	4a10      	ldr	r2, [pc, #64]	; (8000238 <LCD_Command+0x64>)
 80001f6:	f023 0302 	bic.w	r3, r3, #2
 80001fa:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (cmd << 2); // load DATA
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <LCD_Command+0x64>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	4611      	mov	r1, r2
 8000206:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <LCD_Command+0x64>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (EN);
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <LCD_Command+0x64>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <LCD_Command+0x64>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 8000218:	200a      	movs	r0, #10
 800021a:	f000 f87d 	bl	8000318 <_delay_ms>
	GPIOA -> ODR &= ~(EN);
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <LCD_Command+0x64>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <LCD_Command+0x64>)
 8000224:	f023 0302 	bic.w	r3, r3, #2
 8000228:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 f874 	bl	8000318 <_delay_ms>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40020000 	.word	0x40020000

0800023c <LCD_Character>:

void LCD_Character(char ch)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	GPIOA -> ODR = 0;// to clear any previous value on ODR register
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <LCD_Character+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (RS);
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <LCD_Character+0x64>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <LCD_Character+0x64>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR &= ~(EN);
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <LCD_Character+0x64>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <LCD_Character+0x64>)
 800025e:	f023 0302 	bic.w	r3, r3, #2
 8000262:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (ch << 2); // load DATA
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <LCD_Character+0x64>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	0092      	lsls	r2, r2, #2
 800026c:	4611      	mov	r1, r2
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <LCD_Character+0x64>)
 8000270:	430b      	orrs	r3, r1
 8000272:	6153      	str	r3, [r2, #20]
	GPIOA -> ODR |= (EN);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <LCD_Character+0x64>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <LCD_Character+0x64>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 8000280:	200a      	movs	r0, #10
 8000282:	f000 f849 	bl	8000318 <_delay_ms>
	GPIOA -> ODR &= ~(EN);
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LCD_Character+0x64>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <LCD_Character+0x64>)
 800028c:	f023 0302 	bic.w	r3, r3, #2
 8000290:	6153      	str	r3, [r2, #20]
	_delay_ms(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f000 f840 	bl	8000318 <_delay_ms>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020000 	.word	0x40020000

080002a4 <LCD_Initialize>:

void LCD_Initialize()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	_delay_ms(300);
 80002a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002ac:	f000 f834 	bl	8000318 <_delay_ms>
	LCD_Command(0x38);// LCD 8 bit 2 row 16 character mode
 80002b0:	2038      	movs	r0, #56	; 0x38
 80002b2:	f7ff ff8f 	bl	80001d4 <LCD_Command>
	//
	LCD_Command(0x0E);// Cursor
 80002b6:	200e      	movs	r0, #14
 80002b8:	f7ff ff8c 	bl	80001d4 <LCD_Command>
	LCD_Command(0x01);// CLEAR
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff89 	bl	80001d4 <LCD_Command>
	_delay_ms(10);
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 f828 	bl	8000318 <_delay_ms>
	LCD_Command(0x06); // Left to RIGHT
 80002c8:	2006      	movs	r0, #6
 80002ca:	f7ff ff83 	bl	80001d4 <LCD_Command>
	LCD_Command(0x80); // ROW-0 COL-0 Position
 80002ce:	2080      	movs	r0, #128	; 0x80
 80002d0:	f7ff ff80 	bl	80001d4 <LCD_Command>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Print>:

void LCD_Print(char *str)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80002e0:	e007      	b.n	80002f2 <LCD_Print+0x1a>
	{
		LCD_Character(*str);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ffa8 	bl	800023c <LCD_Character>
		str++;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1f3      	bne.n	80002e2 <LCD_Print+0xa>
	}
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <LCD_Clear>:

void LCD_Clear()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	LCD_Command(0x01);
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff63 	bl	80001d4 <LCD_Command>
	_delay_ms(10);
 800030e:	200a      	movs	r0, #10
 8000310:	f000 f802 	bl	8000318 <_delay_ms>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}

08000318 <_delay_ms>:
#define ONE_MS_COUNT	F_CPU / 1000UL
#define ONE_S_COUNT		F_CPU


void _delay_ms(int delay)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < delay; i = i+1)
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e022      	b.n	800036c <_delay_ms+0x54>
		/*
		 * CTRL == CSR
		 * LOAD == RVR
		 * VAL  == CVR
		 * */
		SysTick -> LOAD = ONE_MS_COUNT;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <_delay_ms+0x6c>)
 8000328:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800032c:	605a      	str	r2, [r3, #4]
		// we reduce one value as the counter travels from reload value to zero
		/* Clear the current Value register */
		SysTick -> VAL = 0;
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <_delay_ms+0x6c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
		/* Select the Clock Source */
		SysTick -> CTRL |= CLKSOURCE;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <_delay_ms+0x6c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <_delay_ms+0x6c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6013      	str	r3, [r2, #0]
		//SysTick -> CTRL |= (1<<2);
		//SysTick -> CTRL &= ~(1<<2);
		// if external clock is used, use 0 in CLK SOURCE
		// if internal clock is used, use 1 in CLK SOURCE
		/* Enable the system Tick  */
		SysTick -> CTRL |= ENABLE;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <_delay_ms+0x6c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <_delay_ms+0x6c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6013      	str	r3, [r2, #0]
		/* NOw we will wait for count flag to turn on */
		while ((SysTick -> CTRL & COUNTFLAG) == 0)
 800034c:	bf00      	nop
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <_delay_ms+0x6c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <_delay_ms+0x36>
		{
			// wait here
		}

		// once count flag is generated, we stop the counter
		SysTick -> CTRL &= ~ENABLE;
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <_delay_ms+0x6c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a09      	ldr	r2, [pc, #36]	; (8000384 <_delay_ms+0x6c>)
 8000360:	f023 0301 	bic.w	r3, r3, #1
 8000364:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < delay; i = i+1)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3301      	adds	r3, #1
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbd8      	blt.n	8000326 <_delay_ms+0xe>
	}
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000e010 	.word	0xe000e010

08000388 <main>:
#include "LCD_8BIT.h"

#define GPIOAEN		(1U<<0)

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= GPIOAEN;
 800038c:	4b28      	ldr	r3, [pc, #160]	; (8000430 <main+0xa8>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a27      	ldr	r2, [pc, #156]	; (8000430 <main+0xa8>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
	// SETUP PA0 to PA9 as OUTPUT
	GPIOA -> MODER |= (1U<<0)|(1U<<2)|(1U<<4)|(1U<<6)|(1U<<8)|(1U<<10)|(1U<<12)|(1U<<14)|(1U<<16)|(1U<<18);
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <main+0xac>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4925      	ldr	r1, [pc, #148]	; (8000434 <main+0xac>)
 800039e:	4b26      	ldr	r3, [pc, #152]	; (8000438 <main+0xb0>)
 80003a0:	4313      	orrs	r3, r2
 80003a2:	600b      	str	r3, [r1, #0]
	GPIOA -> MODER &= ~((1U<<1)|(1U<<3)|(1U<<5)|(1U<<7)|(1U<<9)|(1U<<11)|(1U<<13)|(1U<<15)|(1U<<17)|(1U<<19));
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <main+0xac>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4922      	ldr	r1, [pc, #136]	; (8000434 <main+0xac>)
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <main+0xb4>)
 80003ac:	4013      	ands	r3, r2
 80003ae:	600b      	str	r3, [r1, #0]

	LCD_Initialize();
 80003b0:	f7ff ff78 	bl	80002a4 <LCD_Initialize>
	while(1)
	{
		LCD_Command(0x80);LCD_Print("Shakuntla");_delay_ms(1000);
 80003b4:	2080      	movs	r0, #128	; 0x80
 80003b6:	f7ff ff0d 	bl	80001d4 <LCD_Command>
 80003ba:	4821      	ldr	r0, [pc, #132]	; (8000440 <main+0xb8>)
 80003bc:	f7ff ff8c 	bl	80002d8 <LCD_Print>
 80003c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c4:	f7ff ffa8 	bl	8000318 <_delay_ms>
		LCD_Command(0xC0);LCD_Print("Jaiswal");_delay_ms(1000);
 80003c8:	20c0      	movs	r0, #192	; 0xc0
 80003ca:	f7ff ff03 	bl	80001d4 <LCD_Command>
 80003ce:	481d      	ldr	r0, [pc, #116]	; (8000444 <main+0xbc>)
 80003d0:	f7ff ff82 	bl	80002d8 <LCD_Print>
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f7ff ff9e 	bl	8000318 <_delay_ms>
		LCD_Clear();
 80003dc:	f7ff ff92 	bl	8000304 <LCD_Clear>

		LCD_Command(0x80);LCD_Print("Arjun");_delay_ms(1000);
 80003e0:	2080      	movs	r0, #128	; 0x80
 80003e2:	f7ff fef7 	bl	80001d4 <LCD_Command>
 80003e6:	4818      	ldr	r0, [pc, #96]	; (8000448 <main+0xc0>)
 80003e8:	f7ff ff76 	bl	80002d8 <LCD_Print>
 80003ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f0:	f7ff ff92 	bl	8000318 <_delay_ms>
		LCD_Command(0xC0);LCD_Print("Singh");_delay_ms(1000);
 80003f4:	20c0      	movs	r0, #192	; 0xc0
 80003f6:	f7ff feed 	bl	80001d4 <LCD_Command>
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <main+0xc4>)
 80003fc:	f7ff ff6c 	bl	80002d8 <LCD_Print>
 8000400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000404:	f7ff ff88 	bl	8000318 <_delay_ms>
		LCD_Command(0x90);LCD_Print("Rajput");_delay_ms(1000);
 8000408:	2090      	movs	r0, #144	; 0x90
 800040a:	f7ff fee3 	bl	80001d4 <LCD_Command>
 800040e:	4810      	ldr	r0, [pc, #64]	; (8000450 <main+0xc8>)
 8000410:	f7ff ff62 	bl	80002d8 <LCD_Print>
 8000414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000418:	f7ff ff7e 	bl	8000318 <_delay_ms>
		LCD_Command(0x01);_delay_ms(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f7ff fed9 	bl	80001d4 <LCD_Command>
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff78 	bl	8000318 <_delay_ms>
		LCD_Clear();
 8000428:	f7ff ff6c 	bl	8000304 <LCD_Clear>
		LCD_Command(0x80);LCD_Print("Shakuntla");_delay_ms(1000);
 800042c:	e7c2      	b.n	80003b4 <main+0x2c>
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000
 8000438:	00055555 	.word	0x00055555
 800043c:	fff55555 	.word	0xfff55555
 8000440:	08000508 	.word	0x08000508
 8000444:	08000514 	.word	0x08000514
 8000448:	0800051c 	.word	0x0800051c
 800044c:	08000524 	.word	0x08000524
 8000450:	0800052c 	.word	0x0800052c

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff ff7f 	bl	8000388 <main>

0800048a <LoopForever>:

LoopForever:
    b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4d0d      	ldr	r5, [pc, #52]	; (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	; (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2600      	movs	r6, #0
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4d0b      	ldr	r5, [pc, #44]	; (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	; (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2600      	movs	r6, #0
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000534 	.word	0x08000534
 80004e4:	08000534 	.word	0x08000534
 80004e8:	08000534 	.word	0x08000534
 80004ec:	08000538 	.word	0x08000538

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
